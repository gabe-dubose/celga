#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- mean(distances)
print(dispersion)
}
}
length(group.temporal.profiles)
group.temporal.profiles
nrows(group.temporal.profiles)
nrow(group.temporal.profiles)
group.temporal.profiles
typeof(group.temporal.profiles)
nrow(group.temporal.profiles)
nrow(data.frame(group.temporal.profiles))
ncol(data.frame(group.temporal.profiles))
group.temporal.profiles
ncol(group.temporal.profiles)
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- mean(distances)
print(dispersion)
}
}
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- mean(distances)
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
View(diversity.dispersion.data)
View(homologous.group.diversities)
View(diversity.dispersion.data)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
View(diversity.dispersion.data)
plot(diversity.dispersion.data$phylogenetic.diversity, diversity.dispersion.data$dispersion.values)
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
group.diversity <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- sum(distances)
#get group phylogenetic divesity
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
plot(diversity.dispersion.data$phylogenetic.diversity, diversity.dispersion.data$dispersion.values)
View(diversity.dispersion.data)
library("lme4")
model <- lmer(phylogenetic.diversity ~ group.size + (1 | group), data = diversity.dispersion.data)
model <- lm(phylogenetic.diversity ~ group.size, data = diversity.dispersion.data)
summary(model)
model <- lm(dispersion.values ~ group.size*phylogenetic.diversity, data = diversity.dispersion.data)
summary(model)
install.packages("ppcor")
library("ppcor")
# Conduct partial correlation analysis
partial.corr <- pcor.test(diversity.dispersion.data$dispersion.values,
diversity.dispersion.data$phylogenetic.diversity,
diversity.dispersion.data$group.size)
# View the results
print(partial.corr)
# Assuming 'group' is your random effect variable
model <- glmer(dispersion.values ~ phylogenetic.diversity + group.size + (1 | group),
data = diversity.dispersion.data,
family = gaussian)  # Use an appropriate family based on your response variable
summary(model)
# Assuming 'group' is your random effect variable
model <- glmer(dispersion.values ~ phylogenetic.diversity + group.size,
data = diversity.dispersion.data,
family = gaussian)
# Assuming 'group' is your random effect variable
model <- lmer(dispersion.values ~ phylogenetic.diversity + group.size,
data = diversity.dispersion.data,
family = gaussian)
# Assuming 'group' is your random effect variable
model <- lmer(dispersion.values ~ phylogenetic.diversity + group.size,
data = diversity.dispersion.data)
model <- lm(dispersion.values ~ group.size+phylogenetic.diversity, data = diversity.dispersion.data)
summary(model)
model <- lm(dispersion.values ~ phylogenetic.diversity, data = diversity.dispersion.data)
summary(model)
model <- lm(dispersion.values ~ phylogenetic.diversity+group.size, data = diversity.dispersion.data)
summary(model)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$group.size)
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
group.diversity <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- mean(distances)
#get group phylogenetic divesity
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
model <- lm(dispersion.values ~ phylogenetic.diversity+group.size, data = diversity.dispersion.data)
summary(model)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$group.size)
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
group.diversity <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- sum(distances)
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
model <- lm(dispersion.values ~ phylogenetic.diversity+group.size, data = diversity.dispersion.data)
summary(model)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$group.size)
model <- lm(dispersion.values ~ phylogenetic.diversity*group.size, data = diversity.dispersion.data)
summary(model)
#load homologous group diversity data
homologous.group.diversities <- read.csv("../data/homologous_groups_phylogenetic_diversities_striccut.csv")
#load homologous group diversity data
homologous.group.diversities <- read.csv("../data/homologous_groups_phylogenetic_diversities_striccut.csv")
#load temporal expression profile data
temporal.expression.profiles <- read.csv('../data/average_log_expression_by_stage.csv', row.names = 1)
temporal.expression.profiles <- t(temporal.expression.profiles)
#load homologous group data
homologous.groups.file <- '../data/homologous_groups_strict_cutoffs.json'
homologous.groups <- rjson::fromJSON(file=homologous.groups.file)
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
group.diversity <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- sum(distances)
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$group.size)
View(diversity.dispersion.data)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$phylogenetic.diversity)
write.csv(diversity.dispersion.data, '../data/diversity_dispersion_data.csv')
write.csv(diversity.dispersion.data, '../data/diversity_dispersion_data.csv', index_col=FALSE)
write.csv(diversity.dispersion.data, '../data/diversity_dispersion_data.csv', index=FALSE)
?write.csv
write.csv(diversity.dispersion.data, '../data/diversity_dispersion_data.csv', row.names=FALSE)
#initialize vectors to store info
dispersion.values <- c()
group.name <- c()
group.diversity <- c()
#iterate through each homologous group with diversity computation
for (group in homologous.group.diversities$homologous.group.names){
#get corresponding gene ids
genes <- gsub("CELE_", "", homologous.groups[[group]])
#get genes ids that are present
present.genes <- genes[genes %in% rownames(temporal.expression.profiles)]
#only run genes where all genes are present
if (length(present.genes) == length(genes)) {
#select temporal expression profiles for the corresponding group
group.temporal.profiles <- temporal.expression.profiles[c(present.genes),]
#for each expression profile calculate expression dispersion
#calculate centroid
centroid <- colMeans(group.temporal.profiles)
#calculate euclidian distance to centroid for each gene
distances <- apply(group.temporal.profiles, 1, function(expression.profile) {
sqrt(sum((expression.profile - centroid)^2))
})
#take average to calculate dispersion
dispersion <- mean(distances)
#add to vectors
dispersion.values <- c(dispersion.values, dispersion)
group.name <- c(group.name, group)
}
}
diversity.dispersion.data <- data.frame(dispersion.values, group.name)
diversity.dispersion.data <- merge(diversity.dispersion.data,
homologous.group.diversities,
by.x = "group.name",
by.y = "homologous.group.names",
all = FALSE)
plot(diversity.dispersion.data$dispersion.values, diversity.dispersion.data$phylogenetic.diversity)
write.csv(diversity.dispersion.data, '../data/diversity_dispersion_data.csv', row.names=FALSE)
#load data for homologous group phylogenetic diversities
homologous.group.phylo.data <- read.csv('../duplication/data/homologous_groups_phylogenetic_diversities_striccut.csv')
#load data for homologous group phylogenetic diversities
homologous.group.phylo.data <- read.csv('../data/duplication/homologous_groups_phylogenetic_diversities_striccut.csv')
#load data for homologous group phylogenetic diversities
homologous.group.phylo.data <- read.csv('../data/duplication/homologous_groups_phylogenetic_diversities_striccut.csv')
getwd()
#load data for homologous group phylogenetic diversities
homologous.group.phylo.data <- read.csv('../data/duplication/homologous_groups_phylogenetic_diversities_striccut.csv')
setwd('/Volumes/hd01/projects/active/C_elegans_lifecycle_genetic_architecture/scripts')
#load data for homologous group phylogenetic diversities
homologous.group.phylo.data <- read.csv('../data/duplication/homologous_groups_phylogenetic_diversities_striccut.csv')
groups <- c(homologous.group.phylo.data$homologous.group.names)
#load homologous group dictionary
homologous.groups.file <- '../data/duplication/homologous_groups_strict_cutoffs.json'
homologous.groups <- rjson::fromJSON(file=homologous.groups.file)
#load tau data
tau.data <- read.csv('../data/tau_cluster_data.csv')
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
L1_clust <- subset(L1_data, L1_clustered == 1)
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
D_data <- subset(data, stage_bias == "Dauer")
L4_data <- subset(data, stage_bias == "L4")
A_data <- subset(data, stage_bias == "Adult")
View(E_data)
#embryo
E.model <- lm(tau ~ max_expression * embryo_clustered, data = df)
#embryo
E.model <- lm(tau ~ max_expression * embryo_clustered, data = E_data)
summary(E.model)
par(mfrow = c(2, 2))
plot(E.model)
#L1
L1.model <- lm(tau ~ max_expression * L1_clustered, data = L1_data)
summary(L1.model)
par(mfrow = c(2, 2))
plot(L1.model)
#Dauer
D.model <- lm(tau ~ max_expression * Dauer_clustered, data = D_data)
summary(D.model)
par(mfrow = c(2, 2))
plot(L1.model)
#L4
L4.model <- lm(tau ~ max_expression * L4_clustered, data = L4_data)
summary(L4.model)
summary(L4.model)
par(mfrow = c(2, 2))
plot(L4.model)
plot(D.model)
plot(L4.model)
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
D_data <- subset(data, stage_bias == "Dauer")
L4_data <- subset(data, stage_bias == "L4")
A_data <- subset(data, stage_bias == "Adult")
#embryo
E.model <- lm(tau ~ max_expression * embryo_clustered, data = E_data)
summary(E.model)
plot(E.model)
#check model
E.model.reduced <- lm(tau ~ max_expression + embryo_clustered, data = E_data)
summary(E.model.reduced)
anova(E.model.reduced, E.model)
#L1
L1.model <- lm(tau ~ max_expression * L1_clustered, data = L1_data)
summary(L1.model)
par(mfrow = c(2, 2))
plot(L1.model)
anova(E.model.reduced, E.model, test = "Chisq")
anova(E.model.reduced, E.model)
#reduce
L1.model.reduced <- lm(tau ~ max_expression + L1_clustered, data = L1_data)
anova(L1.model.reduced, L1.model)
summary(L1.model)
anova(L1.model, L1.model.reduced)
anova(L1.model.reduced, L1.model)
#reduce
L1.model.reduced <- lm(tau ~ max_expression + L1_clustered, data = L1_data)
anova(L1.model.reduced, L1.model)
anova(L1.model.reduced, L1.model)
#Dauer
D.model <- lm(tau ~ max_expression * Dauer_clustered, data = D_data)
#reduce
L1.model.reduced <- lm(tau ~ max_expression, data = L1_data)
anova(L1.model.reduced, L1.model)
summary(L1.model.reduced)
#reduce
L1.model.reduced <- lm(tau ~ max_expression + L1_clustered, data = L1_data)
summary(L1.model.reduced)
#reduce
L1.model.reduced <- lm(tau ~ max_expression + L1_clustered, data = L1_data)
anova(L1.model.reduced, L1.model)
#Dauer
D.model <- lm(tau ~ max_expression * Dauer_clustered, data = D_data)
summary(D.model)
par(mfrow = c(2, 2))
plot(D.model)
#reduce
D.model.reduced <- lm(tau ~ max_expression + Dauer_clustered, data = D_data)
anova(D.model.reduced, D.model)
#L4
L4.model <- lm(tau ~ max_expression * L4_clustered, data = L4_data)
summary(L4.model)
par(mfrow = c(2, 2))
plot(L4.model)
#reduce
L4.model.reduced <- lm(tau ~ max_expression + L4_clustered, data = L4_data)
anova(L4.model.reduced, L4.model)
#Adult
A.model <- lm(tau ~ max_expression * Adult_clustered, data = A_data)
summary(A.model)
par(mfrow = c(2, 2))
plot(A.model)
#reduce
A.model.reduced <- lm(tau ~ max_expression + Adult_clustered, data = A_data)
anova(A.model.reduced, A.model)
summary(A.model)
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
D_data <- subset(data, stage_bias == "Dauer")
L4_data <- subset(data, stage_bias == "L4")
A_data <- subset(data, stage_bias == "Adult")
#embryo model
embryo.model <- glm(embryo_clustered ~ tau, data = E_data, family = binomial)
summary(embryo.model)
#L1 model
L1.model <- glm(L1_clustered ~ tau, data = L1_data, family = binomial)
summary(L1.model)
getwd()
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
D_data <- subset(data, stage_bias == "Dauer")
L4_data <- subset(data, stage_bias == "L4")
A_data <- subset(data, stage_bias == "Adult")
#embryo model
embryo.model <- glm(embryo_clustered ~ tau, data = E_data, family = binomial)
summary(embryo.model)
#L1 model
L1.model <- glm(L1_clustered ~ tau, data = L1_data, family = binomial)
summary(L1.model)
#Dauer model
D.model <- glm(Dauer_clustered ~ tau, data = D_data, family = binomial)
summary(D.model)
#L4 model
L4.model <- glm(L4_clustered ~ tau, data = L4_data, family = binomial)
summary(L4.model)
#Adult model
A.model <- glm(Adult_clustered ~ tau, data = A_data, family = binomial)
summary(A.model)
getwd()
#load data
data <- read.csv('../data/stage_biased_regions_duplication.csv')
#data violated assumptions of linear model, so I'm
#just going check with correlations
cor.test(data$n_genes, data$non_homolog_ratio, method="spearman")
#load data
data <- read.csv('../data/stage_biased_regions_duplication.csv')
#data violated assumptions of linear model, so I'm
#just going check with correlations
cor.test(data$n_genes, data$non_homolog_ratio, method="spearman")
data <- read.csv('../data/tau_cluster_data.csv')
#partition data
E_data <- subset(data, stage_bias == "Egg")
L1_data <- subset(data, stage_bias == "L1")
D_data <- subset(data, stage_bias == "Dauer")
L4_data <- subset(data, stage_bias == "L4")
A_data <- subset(data, stage_bias == "Adult")
#embryo model
embryo.model <- glm(embryo_clustered ~ tau, data = E_data, family = binomial)
summary(embryo.model)
#L1 model
L1.model <- glm(L1_clustered ~ tau, data = L1_data, family = binomial)
summary(L1.model)
#Dauer model
D.model <- glm(Dauer_clustered ~ tau, data = D_data, family = binomial)
summary(D.model)
#L4 model
L4.model <- glm(L4_clustered ~ tau, data = L4_data, family = binomial)
summary(L4.model)
#Adult model
A.model <- glm(Adult_clustered ~ tau, data = A_data, family = binomial)
summary(A.model)
